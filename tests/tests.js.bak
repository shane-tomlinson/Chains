/*global test, equal, ok, Chain */

(function() {
    var SuperChain = Chain({
        toString: function() {
             return 'SuperChain checking in.';
        },

        addANumber: function(start) {
             return start + 10;
        }
    });

    var SubChain = Chain(SuperChain, {
        toString: function() {
            return 'SubChain and ' + this.next();
        },

        addANumber: function(start) {
             return this.next(start + 5);
        }
    });

    var SubSubChain = Chain(SubChain, {
        toString: function() {
            return 'SubSubChain';
        },

        whack: function() {
           return this.toString() + ' ' +  this.addANumber(2);
        }
    });

    var superInst;

    module("Chain hierarchy");

    test("Superclass superclass", function() {
        equal(typeof SuperChain.superclass, 'undefined', 'superclass has no superclass');
    });

    test("SubChain superclass", function() {
        equal(SubChain.superclass, SuperChain, 'superclass correctly set up');
    });

    module("Chain with no super", {
        setup: function() {
            superInst = Chain.create(SuperChain);
        }
    });

    test("Chain with no superclass is good", function() {
        ok(superInst instanceof SuperChain, 'created');
    });

    test('constructor good', function() {
        equal(superInst.constructor, SuperChain, 'constructor good');
    });

    test("toString", function() {
        equal(superInst.toString(), "SuperChain checking in.");
    });

    test("addANumber", function() {
        equal(superInst.addANumber(5), 15, "addANumber good");
    });


    var subInst;

    module("Chain with super", {
        setup: function() {
            subInst = Chain.create(SubChain);
        }
    });

    test('SubInst is created', function() {
        ok(subInst instanceof SubChain, 'SubInst created');
    });

    test('constructor good', function() {
        equal(subInst.constructor, SubChain, 'constructor good');
    });

    test('toString', function() {
        equal(subInst.toString(), "SubChain and SuperChain checking in.");
    });

    test('addANumber', function() {
        equal(subInst.addANumber(5), 20, "Add a number working properly");
    });

    var subsubInst;

    module("Chain with 2 supers", {
        setup: function() {
            subsubInst = Chain.create(SubSubChain);
        }
    });

    test('toString', function() {
        equal(subsubInst.toString(), 'SubSubChain');
    });

    test('calling all kinds of internals', function() {
        equal(subsubInst.whack(), 'SubSubChain 17');
    });

    module("Two objects at once", {
        setup: function() {
            subInst = Chain.create(SubChain);
            subsubInst = Chain.create(SubSubChain);
        }
    });

    test('toString on both works correctly', function() {
        equal(subsubInst.toString(), 'SubSubChain');
        equal(subInst.toString(), 'SubChain and SuperChain checking in.');
    });

    var SuperConstrChain = Chain({
        constructor: function() {
            this.field = "awesome!";
        },

        toString: function() {
            return this.field;
        }
    });

    var constr = function() {
        this.someField = "This is";
    };
    var ConstrChain = Chain(SuperConstrChain, {
        constructor: constr,
        toString: function() {
            return this.someField + ' ' + this.next();
        }
    });

    var constrInst;
    module("Specifying a constructor", {
        setup: function() {
            constrInst = Chain.create(ConstrChain);
        }
    });

    test('constructor we specify is used', function() {
        equal(constrInst.constructor, constr, 'constructors are the same');
    });

    test('constructor called', function() {
        equal(constrInst.toString(), 'This is awesome!', 'correct value gotten');
    });

    var CompositeChain = Chain({
      whack: function() {
        return "whack" + this.next();
      }
    },

    {
      whack: function() {
        return " a" + this.next();
      }
    },

    {
      whack: function() {
        return " mole";
      }
    });

    var compositeChain;

    module("composite chain", {
      setup: function() {
        compositeChain = Chain.create(CompositeChain);
      }
    });

    test("composite", function() {
      equal(compositeChain.whack(), "whack a mole");
    });

}());

